{
  "namespace": "contrail",
  "protocol": "ContrailProtocol",
  "doc": "Data structures for contrail",


  "types": [
	{"name": "SequenceReadByte",
	 "type": "record",
	 "doc": "Structure representing a DNA sequence read encoded as byte array.",
	 "fields":[
	 	{"name": "id", "type":"string", "doc":"ID for the read."},
	 	{"name": "dna", "type":"bytes","doc":"The dna sequence for this read."},
	 	{"name": "mate_pair_id", "type": "int", "doc": "ID indicating which mate pair this sequence belongs to"}
	 ]
	},
	{"name": "CompressedRead",
     "type": "record",
     "doc": "Structure representing a DNA sequence read. Each sequence is packed into an array of bytes using 3 bits per letter.",
     "fields":[
        {"name": "id", "type":"string", "doc": "ID for the read."},
        {"name": "dna", "type": "bytes", "doc": "The dna sequence for this read."},
        {"name": "length", "type": "int", "doc": "Length of the read."},
        {"name": "mate_pair_id", "type": "int", "doc": "ID indicating which mate pair this sequence belongs to"}
     ]
    },
   {"name": "CompressedSequence",
    "type": "record",
    "namespace": "contrail.sequences",
    "doc": "Structure representing a compressed DNA sequence read. Each sequence is packed into an array of bytes using 3 bits per letter.",
    "fields":[
       {"name": "dna", "type": "bytes", "doc": "The dna sequence for this read."},
       {"name": "length", "type": "int", "doc": "Length of the read."}
     ]
    },
    {"name": "DNAStrand",
     "type":  "enum",
     "namespace": "contrail.sequences",
     "doc": "Enumeration for representing which DNAStrand a fragment comes from.",
     "symbols": ["FORWARD", "REVERSE"]
    },
    {"name": "ReadState",
     "type":  "enum",
     "symbols": ["END5", "END6", "END3", "MIDDLE", "I"]
    },
    {"name": "R5Tag",
     "namespace": "contrail.graph",
     "type": "record",
     "doc": ["Stores information about how reads align to the sequence stored ",
             "in a node. Tag identifies the read a subsequence came from. ",
             "DNAStrand tells us which strand of this node corresponds to ",
             "the read."],
     "fields": [
                 {"name": "tag",
                  "type": "string"
                 },
                 {"name": "strand",
                  "type": "contrail.sequences.DNAStrand"
                 },
                 {"name": "offset",
                  "type": "int"
                 }
               ]
    },
    {"name": "GraphNodeKMerTag",
     "namespace": "contrail.graph",
     "type": "record",
     "doc": "Represent a tag assigned to nodes in the graph.",
     "fields": [
            {"name": "read_tag", "type":"string",
             "doc": "Tag for the read we came from."
            },
            {"name": "chunk", "type":"int",
             "doc": "Identifies the position within the read where it came from."
            }
        ]
    },
    {"type": "enum",
     "name": "StrandsForEdge",
     "symbols": ["FF", "FR", "RF", "RR"],
     "namespace": "contrail.sequences"
    },
    {"name": "KMerEdge",
     "type": "record",
     "namespace": "contrail.graph",
     "doc": "Represent an edge between two KMers. Used only by BuildGraph.",
     "fields": [
        {"name": "strands", "type": "contrail.sequences.StrandsForEdge",
         "doc": "Enum containing the strands for the edge",
         "order": "ignore"
        },
        {"name": "last_base", "type": "bytes",
         "doc": "Represent the compressed base that we need to append to kmer to get the sequence in the terminating node for this edge.",
         "order": "ignore"
        },
        {"name": "tag", "type": "string",
         "doc": "string identifying the node.",
         "order": "ignore"
        },
        {"name": "chunk", "type": "int",
         "doc": "Integer identifying the chunk within the sequence the edge came from.",
         "order": "ignore"
        },
        {"name": "state", "type": "contrail.ReadState",
         "doc": "An enum identifying the state.",
         "order": "ignore"
        }
     ]
    },
    {"type": "enum",
     "name": "EdgeDirection",
     "namespace": "contrail.graph",
     "symbols": ["INCOMING", "OUTGOING"]
    },
    {"name": "EdgeData",
     "namespace": "contrail.graph",
     "type": "record",
     "doc": "Represent the data for a particular instance of an edge.",
     "fields": [ {"name": "strands",
                "type": "contrail.sequences.StrandsForEdge",
                "doc": "An enumeration indicating which strands are used in this edge."
               },
               {"name": "read_tags",
                "type": {"type": "array", "items": "string"},
                "doc": "Array of strings representing the reads this edge came from"
               }
             ]
    },
    {"name": "NeighborData",
     "type": "record",
     "namespace": "contrail.graph",
     "doc": "Represent the neighbor of some node.",
     "fields": [
                 {"name": "node_id",
                  "type": "string",
                  "doc": "The id for the destination node."
                 },
                 {"name": "edges",
                  "type": {"type": "array", "items": "contrail.graph.EdgeData"},
                  "doc": "Describes the edges between these two nodes."
                 }
               ]
    },
    {"name": "GraphNodeData",
     "namespace": "contrail.graph",
     "type": "record",
     "doc": "Represent a node in the DeBruijn Graph.",
     "fields": [
     			       // TODO(jlewi): Should we continue to store this field
     			       // after the QuickMerge stage or should we set it to null to
     			       // save space?
     		         {"name": "mertag", "type":"contrail.graph.GraphNodeKMerTag",
                  "doc": ["A tag for the node based on the read the sequence ",
                          "came from and the chunk within the read.",
                          "This field is primarily used by QuickMerge as a ",
                          "heuristic for guessing which nodes form chains."]
                 },
                 {"name": "node_id",
                  "type": "string",
                  "doc": ["An id for this node. This must be consistent with ",
                          "the id used in neighbors to specify the terminal ",
                          "for an edge."]
                 },
                 {"name": "coverage", "type": "float",
                  "doc": ["Coverage is a float because when merging nodes it ",
                          "is set to a weighted average of the coverage of ",
                          "the nodes being merged."]
                 },                 
                 {"name": "sequence",
                  "type":"contrail.sequences.CompressedSequence",
                  "doc": ["Sequence of bytes representing the compressed ",
                          "sequence of this node. The sequence could ",
                          "correspond to either strand. The strands ",
                          "associated with edges should always be relative ",
                          "to the sequence stored here."]
                 },
                 {"name": "neighbors",
                  "type": {"type": "array",
                           "items":"contrail.graph.NeighborData"},
                  "doc": "An array of this node's neighbors."
                 },
                 {"name": "r5_tags",
                  "type": {"type": "array", "items": "R5Tag",
                           "doc": ["The list of R5Tags keeps track of how the ",
                                   "reads align to this sequence."]
                          }
                 }
               ]
    },
    {"name": "contrail.stages.CompressibleMessage",
     "type": "record",
     "doc": ["Record for the messages outputted by the mapper in the ",
             "Compressible stage."],
     "fields": [{"name": "from_node_id",
                 "type": "string",
                 "doc":  "Id of the node the message is from."},
                {"name": "strands",
                 "type": "contrail.sequences.StrandsForEdge",
                 "doc": ["The strands for the edge. The edge is always an ",
                         "outgoing edge from from_node_id"]}]
    },
    {"name": "contrail.stages.CompressibleMapOutput",
     "type": "record",
     "doc": ["Record used for the output of mapper stage in the compressible ",
             "phase."],
     "fields": [ {"name": "message",
                  "type": ["null", "contrail.stages.CompressibleMessage"],
                  "doc": ["A message informing this node about which ",
                          "neighbors are part of linear chains."]
                 },
                 {"name": "node", "type": ["null", "contrail.graph.GraphNodeData"],
                  "doc": "The node the messages are sent to."
                 }
               ]
    },
    {"name": "contrail.stages.CompressibleStrands",
     "type": "enum",
     "symbols": ["NONE", "FORWARD", "REVERSE", "BOTH"]
    },
    // Using an enum to store which strands are compressible should
    // be slightly more space efficient then a list of strands.
    {"name": "contrail.stages.CompressibleNodeData",
     "type": "record",
     "doc": ["Record for the data outputted by the CompressibleStage. ",
             "Each record contains a graph node and information about which ",
             "directions if any we can compress this node."],
     "fields": [{"name":"compressible_strands",
                 "type": "contrail.stages.CompressibleStrands",
                 "doc":  ["Which strands of the node are compressible with ",
                          "respect to outgoing edges."]},
                {"name": "node",
                 "type": "contrail.graph.GraphNodeData",
                 "doc": "The node data."}]
    }, 
    {"name": "QuickMarkMessage",
     "type": "record",
     "doc": "Message used in the remove tip stage.",
     "fields": [
                 {"name": "node", "type": ["null", "contrail.graph.GraphNodeData"],
                  "doc": "A node in the graph or null if this is a message to another node in the graph"
                 },
                 {"name":"send_to_compressor",
                 "type": "boolean",
                 "doc": ["A boolean indicating the node should be sent to the reducer compressing chains in the QuickMerge phase"]
                 }
                                      
               ]
    },
    {"name": "contrail.stages.EdgeUpdateForMerge",
     "type": "record",
     "doc": ["This message describes how an edge in a node needs to be ",
             "updated to point to a merged node."],
     "fields": [{"name": "old_id",
                 "type": "string",
                 "doc": "The id for the node which is being merged away."},
                {"name": "old_strand",
                 "type": "contrail.sequences.DNAStrand",
                 "doc": "The strand of old_id that is being replaced."},
                {"name": "new_id",
                 "type": "string",
                 "doc": "The id for the merged node."},
                {"name": "new_strand",
                 "type": "contrail.sequences.DNAStrand",
                 "doc": ["The strand of the merged node that will correspond ",
                        "to the edge."]}
               ]
    },
    {"name": "contrail.stages.NodeInfoForMerge",
     "type": "record",
     "doc": ["Contains the information about nodes outputted by the pair mark ",
             "stage."],
     "fields": [{"name": "compressible_node",
                 "type": "contrail.stages.CompressibleNodeData",
                 "doc": "A node in the graph."},
                {"name": "strand_to_merge",
                 "type": "contrail.stages.CompressibleStrands",
                 "doc": ["Which strand if any to merge. The value should not ",
                         "be both. The node is compressed along the outgoing ",
                         "edge for this strand."]
                }
               ]
    },
    {"name": "contrail.stages.PairMarkOutput",
     "type": "record",
     "doc": ["Contains the result of merging several nodes together. ",
             "The result includes messages which need to be sent to other ",
             "nodes to let them know the graph has changed."],
     "fields": [{"name": "payload",
                 "type": ["contrail.stages.EdgeUpdateForMerge",
                          "contrail.stages.NodeInfoForMerge"],
                 "doc": "The data for this message."
                 }
               ]
     },
     {"name": "RemoveTipMessage",
      "type": "record",
      "doc": "Message used in the removeTips stage.",
      "fields": [ {"name": "edge_strands",
		               "type": ["null", "contrail.sequences.StrandsForEdge"],
		               "doc": ["The enumeration for the edge strands we want to ",
		                       "delete ."]
 		              },
                  {"name": "node", 
		               "type": "contrail.graph.GraphNodeData",
                   "doc": "The GraphNodeData (may contain Tip or Non-Tip Node)"
                  }                 
                ]
     },
     {"name": "contrail.stages.TagReadsOutput",
      "type": "record",
      "doc": ["Record used for the output of TagReadsWithContigID."],
      "fields": [ {"name": "read",
                   "type": ["null", "contrail.CompressedRead"],
                   "doc": ["A read."]
                   },
                 {"name": "nodeID", "type": "string",
                  "doc": "The id of a node to group with this read."
                 }
               ]
     },
     {"name": "contrail.graph.ValidateEdge",
      "type": "record",
      "doc": ["A message used to validate an edge in the graph."],
      "fields": [{"name": "source_id",
                  "type": "string",
                  "doc": "The id for the source node."},
                 {"name": "strands",
                  "type": "contrail.sequences.StrandsForEdge",
                  "doc": "The strands for the overlap"
                 },
                 {"name": "overlap",
                  "type": "contrail.sequences.CompressedSequence",
                  "doc": "The overlap between the sequences."
                 }
                ]
     },
     {"name": "contrail.graph.ValidateMessage",
      "type": "record",
      "doc": ["A message used to validate the graph."],
      "fields": [{"name": "node",
                  "type": ["null", "contrail.graph.GraphNodeData"],
                  "doc": "A node in the graph."},
                 {"name": "edge_info",
                  "type": ["null", "contrail.graph.ValidateEdge"],
                  "doc": ["Information about an edge to validate."]
                 }
                ]
     },
     {"name": "contrail.graph.GraphErrorCodes",
      "type":  "enum",
      "doc": "The different type of graph errors.",
      "symbols": ["MISSING_NODE", "DUPLICATE_NODE", "OVERLAP", "MISSING_EDGE"]
     },
     {"name": "contrail.graph.GraphError",
      "type": "record",
      "doc": ["Represents an error in the graph. These are not sequencing ",
              "errors but rather inconsistencies in the graph most likely due ",
              "to bugs in the code."],
      "fields": [{"name": "error_code",
                  "type": "contrail.graph.GraphErrorCodes",
                  "doc": "A node in the graph."},
                 {"name": "message",
                  "type": "string",
                  "doc": "A message describing the error."
                 }
                ]
     },     
     {"name": "contrail.graph.GraphStatsData",
      "type": "record",
      "doc": "This record contains statistics about the graph.",
      "fields": [{"name": "count",
                  "type": "long",
                  "doc": "Number of sequences in this bin."
                 },
                 {"name": "length_sum",
                  "type": "int",
                  "doc": "Sum of the lengths of the sequences in this bin."},
                 {"name": "lengths",
                  "type": {"type": "array", "items": "int"},
                  "doc": ["Lengths of the contigs in this bin. These should ",
                          "be sorted in descending order."]
                 },
                 {"name": "degree_sum",
                  "type": "int",
                  "doc": "The total number of edges in the graph."
                 },
                 {"name": "coverage_sum",
                  "type": "double",
                  "doc": "The sum of the coverage in the graph."
                 }
                ]
     },
     {"name": "contrail.graph.GraphN50StatsData",
      "type": "record",
      "doc": ["This record contains the N50 statistics. The statistics are ",
              "computed with respect to all contigs with lengths in the ",
              "range [minLength, maxLength]."], 
      "fields": [{"name": "num_contigs",
                  "type": "long",
                  "doc": "Number of sequences in this range."
                 },
                 {"name": "min_length",
                  "type": "int",
                  "doc": "Smallest length considered."
                 },
                 {"name": "max_length",
                  "type": "int",
                  "doc": "Maximum length considered."
                 },
                 {"name": "n50_length",
                  "type": "int",
                  "doc": ["The length of the N50 value. This is the length ",
                          "such that the sum of all contigs with length >= ",
                          "to this value is >= 50% of the length_sum"]
                 },
                 {"name": "length_sum",
                  "type": "long",
                  "doc": "The sum of the lengths of all contigs in this range."
                 },
                 {"name": "n50_index",
                  "type": "int",
                  "doc": "The number of contigs with length >= n50_length"
                 },
                 {"name": "mean_coverage",
                  "type": "double",
                  "doc": ["The weighted average of the coverage. The average ",
                          "is weighted by the lengths of the contigs"]
                 },
                 {"name": "mean_degree",
                  "type": "double",
                  "doc": ["The weighted average of the degree. The average ",
                          "is weighted by the lengths of the contigs"]
                 }
                ]
     },
     {"name": "RemoveNeighborMessage",
     "type": "record",
     "doc": "The message can either represent a node in the graph, or a message telling another node to delete edges to some node. Used in mapper output of RemoveLowCoverage",
     "fields": [
                 {"name": "node", "type": ["null", "contrail.graph.GraphNodeData"],
                  "doc": "The node data"
                 },                 
                 {"name": "NodeIDtoRemove", "type": "string",
                  "doc": "The id of a neighbor to remove from the target of this message. This will be the empty string in the case where the message represents a node in the graph."
                 } 
               ]
    },
    {"name": "contrail.stages.FindBubblesOutput",
     "type": "record",
     "doc": [ "Message used to transfer info from FindBubbles to PopBubbles. ",
              "The output is either a node or messages which will get routed ",
              "to the minor node telling it to remove edges to popped ",
              "bubbles."],
     "fields": [
    		    {"name": "node", 
		         "type": ["null", "contrail.graph.GraphNodeData"],
                  "doc": "The GraphNodeData"
                },
                { "name": "minorNodeId",
                  "type": "string",
                  "doc": "The id of the minor node to send the messages to."
                },
                {"name": "deleted_neighbors",
                  "type": {"type": "array", 
                          "items": "string"},
                  "doc": ["A list of neighbors which have been deleted. We ",
                          "use a list because of cases like ",
                          "X->{A, B, C}->Y in which we need to tell Y to ",
                          "remove edges from B and C."] 
                },
                {"name": "palindrome_neighbors",
                 "type": {"type": "array", "items": "string"},
                 "doc": "A list of neighbors which are palindromes."
                }
               ]
    }
  ] // end types
}
